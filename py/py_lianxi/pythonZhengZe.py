#coding:utf-8
#这个类，我们用来学习正则表达式
#正则表达式，是一种用来，匹配 字符串的强有力武器
'''
\d 可以匹配一个数字   '00\d'可以匹配'007'，但无法匹配'00A'；
\w 可以匹配一个字母或数字  '\w\w\d'可以匹配'py3'
. 可以匹配任意字符    'py.'可以匹配'pyc'、'pyo'、'py!'等等。
\s 表示空格 （也包括tab等）

可边长 匹配 
* 表示任意个字符（包括0 个）
+ 表示至少一个字符  
？ 表示0个 或者 1个 字符 
{n} 表示 n 个字符 
{n,m} 表示 n 到 m 个字符 


eg：  \d{3}\s+\d{3,8}

可以匹配   三个 数字   空格  三个到八个之间的数字


进阶 
要做到 更加精准的匹配，可以用[] 表示范围 ，比如 
[0-9a-zA-Z\_] 可以匹配一个数字，字母或者下划线 
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符

A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。


Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要特别注意：
s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'
因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：

s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'


Python 中提供了 re 模块
'''

import re
print(re.match(r'^\d{3}-\d{3,8}','101-12345'))

#切分字符串  re 中可以中正则俩切分

s = re.split(r'\s+','ab   c ')
print(s)
s = re.split(r'[\s\,]+', 'a,b, c  d')
print(s)

#分组 用()表示的就是要提取的分组（Group）
m = re.match(r'^(\d{3})-(\d{3,8})$','010-123456')
print(m.group(0))
print(m.group(1))















